"""fede

Revision ID: e27a2f149950
Revises: 
Create Date: 2025-09-12 16:19:54.965023

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e27a2f149950'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('platform_wallet',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_platform_wallet'))
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('phone', sa.Text(), nullable=False),
    sa.Column('password', sa.Text(), nullable=False),
    sa.Column('avator_url', sa.Text(), nullable=False),
    sa.Column('bio', sa.Text(), nullable=False),
    sa.Column('role', sa.String(length=255), nullable=False),
    sa.Column('date_joined', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("role IN ('admin', 'provider', 'customer')", name=op.f('ck_users_check_user_role')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('phone', name=op.f('uq_users_phone'))
    )
    op.create_table('experiences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('provider_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('destinations', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('activities', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('inclusions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('exclusions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('poster_image_url', sa.Text(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=False),
    sa.Column('meeting_point', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("status IN ('draft', 'published', 'closed')", name=op.f('ck_experiences_check_experience_status')),
    sa.ForeignKeyConstraint(['provider_id'], ['users.id'], name=op.f('fk_experiences_provider_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_experiences'))
    )
    op.create_table('payment_method',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('default_method', sa.String(length=255), nullable=False),
    sa.Column('paybill', sa.Integer(), nullable=True),
    sa.Column('till_number', sa.Integer(), nullable=True),
    sa.Column('account_no', sa.Text(), nullable=True),
    sa.Column('mpesa_number', sa.Text(), nullable=True),
    sa.Column('bank_id', sa.Text(), nullable=True),
    sa.Column('bank_account_number', sa.Text(), nullable=True),
    sa.Column('default', sa.Boolean(), nullable=False),
    sa.CheckConstraint("default_method IN ('mpesa', 'bank', 'card')", name=op.f('ck_payment_method_check_default_method')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_payment_method_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_method'))
    )
    op.create_table('settlement_txn',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('request_amount', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('approved_amount', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('checkout_id', sa.Text(), nullable=False),
    sa.Column('txn_id', sa.Text(), nullable=False),
    sa.Column('service_fee', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('platform', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_settlement_txn_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_settlement_txn'))
    )
    op.create_table('user_wallet',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_wallet_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_wallet')),
    sa.UniqueConstraint('user_id', name=op.f('uq_user_wallet_user_id'))
    )
    op.create_table('slots',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('experience_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('booked', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['experience_id'], ['experiences.id'], name=op.f('fk_slots_experience_id_experiences')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_slots'))
    )
    op.create_table('reservations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('slot_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('amount_paid', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('payment_type', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=255), nullable=False),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('update_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('experience_id', sa.UUID(), nullable=False),
    sa.Column('checked_in', sa.Boolean(), nullable=False),
    sa.CheckConstraint("payment_type IN ('card', 'mpesa', 'bank', 'wallet')", name=op.f('ck_reservations_check_payment_type')),
    sa.CheckConstraint("status IN ('pending', 'confirmed', 'cancelled', 'completed')", name=op.f('ck_reservations_check_reservation_status')),
    sa.ForeignKeyConstraint(['experience_id'], ['experiences.id'], name=op.f('fk_reservations_experience_id_experiences')),
    sa.ForeignKeyConstraint(['slot_id'], ['slots.id'], name=op.f('fk_reservations_slot_id_slots')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_reservations_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reservations'))
    )
    op.create_table('reservation_refunds',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reservation_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('experience_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("status IN ('pending', 'approved', 'rejected')", name=op.f('ck_reservation_refunds_check_reservation_refund_status')),
    sa.ForeignKeyConstraint(['experience_id'], ['experiences.id'], name=op.f('fk_reservation_refunds_experience_id_experiences')),
    sa.ForeignKeyConstraint(['reservation_id'], ['reservations.id'], name=op.f('fk_reservation_refunds_reservation_id_reservations')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_reservation_refunds_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reservation_refunds'))
    )
    op.create_table('reservation_txn',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('experience_id', sa.UUID(), nullable=False),
    sa.Column('reservation_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('payment_method', sa.Text(), nullable=False),
    sa.Column('platform_fee', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('slot_id', sa.UUID(), nullable=False),
    sa.Column('transaction_reference', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=255), nullable=False),
    sa.Column('paid_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'success', 'failed')", name=op.f('ck_reservation_txn_check_txn_status')),
    sa.ForeignKeyConstraint(['experience_id'], ['experiences.id'], name=op.f('fk_reservation_txn_experience_id_experiences')),
    sa.ForeignKeyConstraint(['reservation_id'], ['reservations.id'], name=op.f('fk_reservation_txn_reservation_id_reservations')),
    sa.ForeignKeyConstraint(['slot_id'], ['slots.id'], name=op.f('fk_reservation_txn_slot_id_slots')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reservation_txn'))
    )
    op.create_table('users_ledger',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('txn_type', sa.String(length=255), nullable=False),
    sa.Column('reservation_txn', sa.UUID(), nullable=True),
    sa.Column('refund_txn', sa.UUID(), nullable=True),
    sa.Column('transaction_ref', sa.Text(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('balance_before', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('date_done', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("txn_type IN ('debit', 'credit')", name=op.f('ck_users_ledger_check_ledger_txn_type')),
    sa.ForeignKeyConstraint(['refund_txn'], ['reservation_refunds.id'], name=op.f('fk_users_ledger_refund_txn_reservation_refunds')),
    sa.ForeignKeyConstraint(['reservation_txn'], ['reservation_txn.id'], name=op.f('fk_users_ledger_reservation_txn_reservation_txn')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_users_ledger_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users_ledger'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_ledger')
    op.drop_table('reservation_txn')
    op.drop_table('reservation_refunds')
    op.drop_table('reservations')
    op.drop_table('slots')
    op.drop_table('user_wallet')
    op.drop_table('settlement_txn')
    op.drop_table('payment_method')
    op.drop_table('experiences')
    op.drop_table('users')
    op.drop_table('platform_wallet')
    # ### end Alembic commands ###
